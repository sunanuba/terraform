------->Usage of for_each against the set of strings

variable "users" {
  type = set(string)
  default = ["bob", "alice"]
}
resource "aws_iam_user" "example" {
  for_each = var.users
  name = each.key
}


--------->Usage of for_each against map

variable "users" {
  type = map
  default = {
   TeamLeader = subha
   QA = meena
   Developer = Prabu
}

resource "aws_iam_user" "example" {
  for_each = var.users
  name = each.value
  tags = {
   title = each.key
}
}
  

------->Usage of for_each against list of map

Example terraform code to create the secuirty group with the associated inbound and outbound network rules.

Original version : 

resource "aws_security_group" "mySG" {
  name = "mySG"
  description = "Allow ssh and http ingress"
  }

resource "aws_vpc_security_group_ingress_rule" "example-ingress1" {
 secuirty_group_id = aws_security_group.mySG.id
 from_port = "80"
 to_port = "80"
 cidr_ipv4 = "10.80.0.0/24"  
 ip_protocol = "tcp"
 } 
 
resource "aws_vpc_secuirty_group_ingress_rule" "example-ingress2" {
 secuirty_group_id = aws_security_group.mySG.id
 from_port = "22"
 to_port = "22"
 cidr_ipv4 = "10.22.0.0/24"  
 ip_protocol = "tcp"
 } 

Improved version:


 variable "myvars" {
 default = [
  {
  from_port = "22"
  to_port = "22"
  cidr_ipv4 = "10.22.0.0/24"
 },
 { 
  from_port = "80"
  to_port = "80"
  cidr_ipv4 = "10.80.0.0/24"
 }
 ]
 }

 resource "aws_security_group" "mySG" {
  name = "mySG"
  description = "Allow ssh and http ingress"
  }
 
 resource "aws_vpc_security_group_ingress_rule" "example-ingress" {
 security_group_id = aws_security_group.mySG.id
 for_each = { for idx,rule in var.myvars : idx => rule }
 from_port = each.value.from_port
 to_port = each.value.to_port
 cidr_ipv4 = each.value.cidr_ipv4 
 ip_protocol = "tcp"
 } 
 


Output

Terraform will perform the following actions:

  # aws_security_group.mySG will be created
  + resource "aws_security_group" "mySG" {
      + arn                    = (known after apply)
      + description            = "Allow ssh and http ingress"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "mySG"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + region                 = "us-east-2"
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_vpc_security_group_ingress_rule.example-ingress["0"] will be created
  + resource "aws_vpc_security_group_ingress_rule" "example-ingress" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "10.22.0.0/24"
      + from_port              = 22
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + region                 = "us-east-2"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 22
    }

  # aws_vpc_security_group_ingress_rule.example-ingress["1"] will be created
  + resource "aws_vpc_security_group_ingress_rule" "example-ingress" {
      + arn                    = (known after apply)
      + cidr_ipv4              = "10.80.0.0/24"
      + from_port              = 80
      + id                     = (known after apply)
      + ip_protocol            = "tcp"
      + region                 = "us-east-2"
      + security_group_id      = (known after apply)
      + security_group_rule_id = (known after apply)
      + tags_all               = {}
      + to_port                = 80
    }

Plan: 3 to add, 0 to change, 0 to destroy.

